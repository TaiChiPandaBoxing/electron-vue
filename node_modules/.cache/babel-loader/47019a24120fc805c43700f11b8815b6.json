{"remainingRequest":"C:\\Workspace\\electron-vue-template\\node_modules\\babel-loader\\lib\\index.js!C:\\Workspace\\electron-vue-template\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Workspace\\electron-vue-template\\src\\db\\index.js","dependencies":[{"path":"C:\\Workspace\\electron-vue-template\\src\\db\\index.js","mtime":1566176458130},{"path":"C:\\Workspace\\electron-vue-template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Workspace\\electron-vue-template\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Workspace\\electron-vue-template\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Workspace\\\\electron-vue-template\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar DBInfo = {\n  name: 'DataBase',\n  version: 1,\n  instance: {\n    name: 'user',\n    keyPath: 'id'\n  }\n};\nvar indexDB = {\n  DB: null,\n  indexDB: window.indexedDB || window.webkitindexedDB,\n  IDBKeyRange: window.IDBKeyRange || window.webkitIDBKeyRange,\n  openDB: function () {\n    var _openDB = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var _this = this;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var self = _this;\n                var version = DBInfo.version || 1;\n\n                var request = _this.indexDB.open(DBInfo.name, version);\n\n                request.onerror = function (e) {\n                  reject(e.currentTarget.error.message);\n                };\n\n                request.onsuccess = function (e) {\n                  self.DB = e.target.result;\n                  resolve(e.target.result);\n                };\n\n                request.onupgradeneeded = function (e) {\n                  var db = e.target.result;\n\n                  if (!db.objectStoreNames.contains(DBInfo.instance.name)) {\n                    // 没有该对象空间时创建该对象空间\n                    // eslint-disable-next-line\n                    var store = db.createObjectStore(DBInfo.instance.name, {\n                      keyPath: DBInfo.instance.keyPath,\n                      autoIncrement: true\n                    });\n                    console.log('成功建立对象存储空间：' + DBInfo.instance.name); // const transaction = event.target.transaction\n                    // transaction.oncomplete = function (e) {\n                    //   // Now store is available to be populated\n                    //   resolve(e.target.result)\n                    // }\n                  }\n                };\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function openDB() {\n      return _openDB.apply(this, arguments);\n    }\n\n    return openDB;\n  }(),\n  addData: function addData(data, callback) {\n    // 添加数据，重复添加会报错\n    this.openDB().then(function (db) {\n      var store = db.transaction(DBInfo.instance.name, 'readwrite').objectStore(DBInfo.instance.name);\n\n      for (var i = 0; i < data.length; i++) {\n        var request = store.add(data[i]);\n\n        request.onerror = function () {\n          console.log('add添加数据库中已有该数据'); // this.putData(db, storename, data)\n        };\n\n        request.onsuccess = function () {\n          console.log('add添加数据已存入数据库');\n          callback();\n        };\n      }\n    });\n  }\n};\nexport { indexDB };",{"version":3,"sources":["C:\\Workspace\\electron-vue-template\\src\\db\\index.js"],"names":["DBInfo","name","version","instance","keyPath","indexDB","DB","window","indexedDB","webkitindexedDB","IDBKeyRange","webkitIDBKeyRange","openDB","Promise","resolve","reject","self","request","open","onerror","e","currentTarget","error","message","onsuccess","target","result","onupgradeneeded","db","objectStoreNames","contains","store","createObjectStore","autoIncrement","console","log","addData","data","callback","then","transaction","objectStore","i","length","add"],"mappings":"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","sourcesContent":["const DBInfo = {\r\n  name: 'DataBase',\r\n  version: 1,\r\n  instance: {\r\n    name: 'user',\r\n    keyPath: 'id'\r\n  }\r\n}\r\n\r\nlet indexDB = {\r\n  DB: null,\r\n  indexDB: window.indexedDB || window.webkitindexedDB,\r\n  IDBKeyRange: window.IDBKeyRange || window.webkitIDBKeyRange,\r\n  openDB: async function () {\r\n    return new Promise((resolve, reject) => {\r\n      const self = this\r\n      const version = DBInfo.version || 1\r\n      const request = this.indexDB.open(DBInfo.name, version)\r\n      request.onerror = function (e) {\r\n        reject(e.currentTarget.error.message)\r\n      }\r\n      request.onsuccess = function (e) {\r\n        self.DB = e.target.result\r\n        resolve(e.target.result)\r\n      }\r\n      request.onupgradeneeded = function (e) {\r\n        const db = e.target.result\r\n        if (!db.objectStoreNames.contains(DBInfo.instance.name)) {\r\n          // 没有该对象空间时创建该对象空间\r\n          // eslint-disable-next-line\r\n          const store = db.createObjectStore(DBInfo.instance.name, {\r\n            keyPath: DBInfo.instance.keyPath,\r\n            autoIncrement: true\r\n          })\r\n          console.log('成功建立对象存储空间：' + DBInfo.instance.name)\r\n          // const transaction = event.target.transaction\r\n          // transaction.oncomplete = function (e) {\r\n          //   // Now store is available to be populated\r\n          //   resolve(e.target.result)\r\n          // }\r\n        }\r\n      }\r\n    })\r\n  },\r\n  addData: function (data, callback) {\r\n    // 添加数据，重复添加会报错\r\n    this.openDB().then((db) => {\r\n      const store = db.transaction(DBInfo.instance.name, 'readwrite').objectStore(DBInfo.instance.name)\r\n      for (let i = 0; i < data.length; i++) {\r\n        const request = store.add(data[i])\r\n        request.onerror = function () {\r\n          console.log('add添加数据库中已有该数据')\r\n          // this.putData(db, storename, data)\r\n        }\r\n        request.onsuccess = function () {\r\n          console.log('add添加数据已存入数据库')\r\n          callback()\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\nexport {\r\n  indexDB\r\n}\r\n"]}]}