{"remainingRequest":"C:\\Workspace\\electron-vue-template\\node_modules\\babel-loader\\lib\\index.js!C:\\Workspace\\electron-vue-template\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Workspace\\electron-vue-template\\src\\lib\\utils.js","dependencies":[{"path":"C:\\Workspace\\electron-vue-template\\src\\lib\\utils.js","mtime":1566290805909},{"path":"C:\\Workspace\\electron-vue-template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Workspace\\electron-vue-template\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Workspace\\electron-vue-template\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n\n/**\r\n* 通过crypto-js实现 加解密工具\r\n* AES、HASH(MD5、SHA256)、base64\r\n*/\nimport CryptoJS from 'crypto-js';\nvar KEY = CryptoJS.enc.Utf8.parse('1234567812345678');\nvar IV = CryptoJS.enc.Utf8.parse('1234567812345678');\nvar key = CryptoJS.enc.Utf8.parse(KEY);\nvar iv = CryptoJS.enc.Utf8.parse(IV);\n/**\r\n * Encrypt 返回加密后的字符串\r\n * @param {String} data 未加密的字符串\r\n */\n\nexport function Encrypt(data) {\n  // 加密\n  var encrypted = CryptoJS.AES.encrypt(data, key, {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return encrypted.toString(); // 返回的是base64格式的密文\n}\n/**\r\n * Decrypt 返回原始的字符串\r\n * @param {String} encrypted 加密的字符串\r\n */\n\nexport function Decrypt(encrypted) {\n  // 解密\n  var decrypted = CryptoJS.AES.decrypt(encrypted, key, {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return decrypted.toString(CryptoJS.enc.Utf8);\n}\n/**\r\n * PrefixZero 补零函数\r\n * @param {Number} num  需要补零的数字\r\n * @param {Number} length 需要保留的数字长度\r\n */\n\nexport function PrefixZero(num) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return (Array(length).join(0) + num).slice(-length);\n}",{"version":3,"sources":["C:\\Workspace\\electron-vue-template\\src\\lib\\utils.js"],"names":["CryptoJS","KEY","enc","Utf8","parse","IV","key","iv","Encrypt","data","encrypted","AES","encrypt","mode","CBC","padding","pad","Pkcs7","toString","Decrypt","decrypted","decrypt","PrefixZero","num","length","Array","join","slice"],"mappings":";;AAAA;;;;AAIA,OAAOA,QAAP,MAAqB,WAArB;AAEA,IAAMC,GAAG,GAAGD,QAAQ,CAACE,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwB,kBAAxB,CAAZ;AACA,IAAMC,EAAE,GAAGL,QAAQ,CAACE,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwB,kBAAxB,CAAX;AAEA,IAAIE,GAAG,GAAGN,QAAQ,CAACE,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBH,GAAxB,CAAV;AACA,IAAIM,EAAE,GAAGP,QAAQ,CAACE,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBC,EAAxB,CAAT;AACA;;;;;AAIA,OAAO,SAASG,OAAT,CAAkBC,IAAlB,EAAwB;AAAE;AAC/B,MAAIC,SAAS,GAAGV,QAAQ,CAACW,GAAT,CAAaC,OAAb,CAAqBH,IAArB,EAA2BH,GAA3B,EAAgC;AAC9CC,IAAAA,EAAE,EAAFA,EAD8C;AAE9CM,IAAAA,IAAI,EAAEb,QAAQ,CAACa,IAAT,CAAcC,GAF0B;AAG9CC,IAAAA,OAAO,EAAEf,QAAQ,CAACgB,GAAT,CAAaC;AAHwB,GAAhC,CAAhB;AAKA,SAAOP,SAAS,CAACQ,QAAV,EAAP,CAN6B,CAMD;AAC7B;AACD;;;;;AAIA,OAAO,SAASC,OAAT,CAAkBT,SAAlB,EAA6B;AAAE;AACpC,MAAIU,SAAS,GAAGpB,QAAQ,CAACW,GAAT,CAAaU,OAAb,CAAqBX,SAArB,EAAgCJ,GAAhC,EAAqC;AACnDC,IAAAA,EAAE,EAAFA,EADmD;AAEnDM,IAAAA,IAAI,EAAEb,QAAQ,CAACa,IAAT,CAAcC,GAF+B;AAGnDC,IAAAA,OAAO,EAAEf,QAAQ,CAACgB,GAAT,CAAaC;AAH6B,GAArC,CAAhB;AAKA,SAAOG,SAAS,CAACF,QAAV,CAAmBlB,QAAQ,CAACE,GAAT,CAAaC,IAAhC,CAAP;AACD;AACD;;;;;;AAKA,OAAO,SAASmB,UAAT,CAAqBC,GAArB,EAAsC;AAAA,MAAZC,MAAY,uEAAH,CAAG;AAC3C,SAAO,CAACC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,CAAmB,CAAnB,IAAwBH,GAAzB,EAA8BI,KAA9B,CAAoC,CAACH,MAArC,CAAP;AACD","sourcesContent":["/**\r\n* 通过crypto-js实现 加解密工具\r\n* AES、HASH(MD5、SHA256)、base64\r\n*/\r\nimport CryptoJS from 'crypto-js'\r\n\r\nconst KEY = CryptoJS.enc.Utf8.parse('1234567812345678')\r\nconst IV = CryptoJS.enc.Utf8.parse('1234567812345678')\r\n\r\nlet key = CryptoJS.enc.Utf8.parse(KEY)\r\nlet iv = CryptoJS.enc.Utf8.parse(IV)\r\n/**\r\n * Encrypt 返回加密后的字符串\r\n * @param {String} data 未加密的字符串\r\n */\r\nexport function Encrypt (data) { // 加密\r\n  let encrypted = CryptoJS.AES.encrypt(data, key, {\r\n    iv,\r\n    mode: CryptoJS.mode.CBC,\r\n    padding: CryptoJS.pad.Pkcs7\r\n  })\r\n  return encrypted.toString() // 返回的是base64格式的密文\r\n}\r\n/**\r\n * Decrypt 返回原始的字符串\r\n * @param {String} encrypted 加密的字符串\r\n */\r\nexport function Decrypt (encrypted) { // 解密\r\n  let decrypted = CryptoJS.AES.decrypt(encrypted, key, {\r\n    iv,\r\n    mode: CryptoJS.mode.CBC,\r\n    padding: CryptoJS.pad.Pkcs7\r\n  })\r\n  return decrypted.toString(CryptoJS.enc.Utf8)\r\n}\r\n/**\r\n * PrefixZero 补零函数\r\n * @param {Number} num  需要补零的数字\r\n * @param {Number} length 需要保留的数字长度\r\n */\r\nexport function PrefixZero (num, length = 2) {\r\n  return (Array(length).join(0) + num).slice(-length)\r\n}\r\n"]}]}